import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as e}from"./app-bkI6Y7I-.js";const t={};function l(h,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="浏览器发送请求的六个核心步骤" tabindex="-1"><a class="header-anchor" href="#浏览器发送请求的六个核心步骤"><span>浏览器发送请求的六个核心步骤</span></a></h1><h3 id="_1-构建请求-request-construction" tabindex="-1"><a class="header-anchor" href="#_1-构建请求-request-construction"><span>1. 构建请求（Request Construction）</span></a></h3><p><strong>技术原理：</strong></p><ul><li><strong>URL解析</strong>: 浏览器首先解析用户输入的URL，提取协议（http/https）、域名、端口、路径等组件</li><li><strong>HTTP报文构建</strong>: 根据用户操作构建HTTP请求报文，包括： <ul><li>请求行：<code>GET /path HTTP/1.1</code></li><li>请求头：User-Agent、Accept、Cookie等</li><li>请求体：POST数据（如果有）</li></ul></li></ul><p><strong>示例：</strong></p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api/data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html,application/xhtml+xml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> keep-alive</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查找缓存-cache-lookup" tabindex="-1"><a class="header-anchor" href="#_2-查找缓存-cache-lookup"><span>2. 查找缓存（Cache Lookup）</span></a></h3><p><strong>缓存层级结构：</strong></p><ul><li><strong>浏览器缓存</strong>: 检查本地磁盘/内存缓存</li><li><strong>代理缓存</strong>: CDN、企业代理服务器</li><li><strong>网关缓存</strong>: 反向代理、负载均衡器</li></ul><p><strong>缓存策略：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Cache-Control: max-age=3600, public</span></span>
<span class="line"><span>ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span></span>
<span class="line"><span>Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>命中判断：</strong></p><ul><li>检查资源是否过期（expires、max-age）</li><li>验证ETag或Last-Modified是否匹配</li><li>如果缓存有效，直接返回，跳过后续步骤</li></ul><h3 id="_3-准备ip地址和端口-dns-resolution-port-preparation" tabindex="-1"><a class="header-anchor" href="#_3-准备ip地址和端口-dns-resolution-port-preparation"><span>3. 准备IP地址和端口（DNS Resolution &amp; Port Preparation）</span></a></h3><p><strong>DNS解析过程：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>example.com → DNS查询 → 192.168.1.100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>多级DNS查询：</strong></p><ol><li><strong>本地DNS缓存</strong>: 检查系统DNS缓存</li><li><strong>递归DNS服务器</strong>: ISP提供的DNS服务器</li><li><strong>根域名服务器</strong>: 全球13台根服务器</li><li><strong>顶级域服务器</strong>: .com域服务器</li><li><strong>权威域名服务器</strong>: example.com的权威服务器</li></ol><p><strong>端口确定：</strong></p><ul><li>HTTP: 默认80端口</li><li>HTTPS: 默认443端口</li><li>自定义端口: URL中指定</li></ul><h3 id="_4-等待tcp队列-tcp-queue-management" tabindex="-1"><a class="header-anchor" href="#_4-等待tcp队列-tcp-queue-management"><span>4. 等待TCP队列（TCP Queue Management）</span></a></h3><p><strong>连接池管理：</strong></p><ul><li><strong>并发限制</strong>: 浏览器对同一域名的并发连接数有限制（通常6-8个）</li><li><strong>队列排队</strong>: 超出限制的请求进入等待队列</li><li><strong>连接复用</strong>: HTTP/1.1的Keep-Alive机制复用连接</li></ul><p><strong>队列调度策略：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConnectionPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> max_connections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.max_connections </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> max_connections</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.active_connections </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.waiting_queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.active_connections) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.max_connections:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">create_connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.waiting_queue.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-建立tcp连接-tcp-connection-establishment" tabindex="-1"><a class="header-anchor" href="#_5-建立tcp连接-tcp-connection-establishment"><span>5. 建立TCP连接（TCP Connection Establishment）</span></a></h3><p><strong>三次握手过程：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>客户端 → SYN → 服务器</span></span>
<span class="line"><span>客户端 ← SYN+ACK ← 服务器  </span></span>
<span class="line"><span>客户端 → ACK → 服务器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>详细技术流程：</strong></p><ol><li><strong>SYN</strong>: 客户端发送同步序列编号</li><li><strong>SYN-ACK</strong>: 服务器确认并发送自己的序列编号</li><li><strong>ACK</strong>: 客户端确认服务器的序列编号</li></ol><p><strong>HTTPS额外步骤（TLS握手）：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. Client Hello（支持的加密套件）</span></span>
<span class="line"><span>2. Server Hello（选择的加密套件）</span></span>
<span class="line"><span>3. Certificate（服务器证书）</span></span>
<span class="line"><span>4. Server Key Exchange（密钥交换）</span></span>
<span class="line"><span>5. Certificate Request（可选）</span></span>
<span class="line"><span>6. Server Hello Done</span></span>
<span class="line"><span>7. Client Key Exchange（预主密钥）</span></span>
<span class="line"><span>8. Change Cipher Spec</span></span>
<span class="line"><span>9. Finished</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-发送http请求-http-request-transmission" tabindex="-1"><a class="header-anchor" href="#_6-发送http请求-http-request-transmission"><span>6. 发送HTTP请求（HTTP Request Transmission）</span></a></h3><p><strong>数据传输过程：</strong></p><ul><li><strong>应用层</strong>: HTTP协议打包数据</li><li><strong>传输层</strong>: TCP协议分段、加序列号</li><li><strong>网络层</strong>: IP协议路由寻址</li><li><strong>数据链路层</strong>: 以太网帧封装</li><li><strong>物理层</strong>: 电信号/光信号传输</li></ul><p><strong>HTTP/2优化：</strong></p><ul><li><strong>多路复用</strong>: 单连接并行处理多请求</li><li><strong>头部压缩</strong>: HPACK算法压缩HTTP头</li><li><strong>服务器推送</strong>: 主动推送资源</li></ul><h2 id="🔧-性能优化策略" tabindex="-1"><a class="header-anchor" href="#🔧-性能优化策略"><span>🔧 性能优化策略</span></a></h2><h3 id="网络层面优化" tabindex="-1"><a class="header-anchor" href="#网络层面优化"><span>网络层面优化：</span></a></h3><ol><li><strong>DNS预解析</strong>: <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//example.com&quot;&gt;</code></li><li><strong>连接预建立</strong>: <code>&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&gt;</code></li><li><strong>HTTP/2</strong>: 启用多路复用和头部压缩</li><li><strong>CDN加速</strong>: 就近访问，减少网络延迟</li></ol><h3 id="应用层面优化" tabindex="-1"><a class="header-anchor" href="#应用层面优化"><span>应用层面优化：</span></a></h3><ol><li><strong>缓存策略</strong>: 合理设置Cache-Control</li><li><strong>资源合并</strong>: 减少HTTP请求数量</li><li><strong>压缩传输</strong>: Gzip/Brotli压缩</li><li><strong>懒加载</strong>: 按需加载资源</li></ol><h2 id="🚨-常见问题与解决" tabindex="-1"><a class="header-anchor" href="#🚨-常见问题与解决"><span>🚨 常见问题与解决</span></a></h2><h3 id="dns解析失败" tabindex="-1"><a class="header-anchor" href="#dns解析失败"><span>DNS解析失败：</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 诊断命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nslookup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcp连接超时" tabindex="-1"><a class="header-anchor" href="#tcp连接超时"><span>TCP连接超时：</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Python requests超时设置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3.05</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http状态码处理" tabindex="-1"><a class="header-anchor" href="#http状态码处理"><span>HTTP状态码处理：</span></a></h3><ul><li><strong>2xx</strong>: 成功响应</li><li><strong>3xx</strong>: 重定向处理</li><li><strong>4xx</strong>: 客户端错误</li><li><strong>5xx</strong>: 服务器错误</li></ul><p>这个完整的请求流程体现了现代网络通信的复杂性和精妙设计，每个步骤都有其存在的意义和优化空间。理解这些原理对于网络编程、性能优化和问题排查都具有重要意义。</p>`,50)]))}const o=i(t,[["render",l]]),d=JSON.parse('{"path":"/zh/python/pachong2.html","title":"浏览器发送请求的六个核心步骤","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-08-12T00:00:00.000Z","category":["Python"],"tag":["爬虫","学习"],"description":"浏览器发送请求的六个核心步骤 1. 构建请求（Request Construction） 技术原理： URL解析: 浏览器首先解析用户输入的URL，提取协议（http/https）、域名、端口、路径等组件 HTTP报文构建: 根据用户操作构建HTTP请求报文，包括： 请求行：GET /path HTTP/1.1 请求头：User-Agent、Accep...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器发送请求的六个核心步骤\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-14T13:10:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TheBreeze\\",\\"url\\":\\"https://thebreeze12.github.io/blog/zh/\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/zh/python/pachong2.html"}],["meta",{"property":"og:site_name","content":"博客主页"}],["meta",{"property":"og:title","content":"浏览器发送请求的六个核心步骤"}],["meta",{"property":"og:description","content":"浏览器发送请求的六个核心步骤 1. 构建请求（Request Construction） 技术原理： URL解析: 浏览器首先解析用户输入的URL，提取协议（http/https）、域名、端口、路径等组件 HTTP报文构建: 根据用户操作构建HTTP请求报文，包括： 请求行：GET /path HTTP/1.1 请求头：User-Agent、Accep..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T13:10:16.000Z"}],["meta",{"property":"article:tag","content":"学习"}],["meta",{"property":"article:tag","content":"爬虫"}],["meta",{"property":"article:published_time","content":"2025-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-14T13:10:16.000Z"}]]},"git":{"createdTime":1755177016000,"updatedTime":1755177016000,"contributors":[{"name":"TheBreeze","username":"TheBreeze","email":"3246119723@qq.com","commits":1,"url":"https://github.com/TheBreeze"}]},"readingTime":{"minutes":3.34,"words":1001},"filePathRelative":"zh/python/pachong2.md","excerpt":"\\n<h3>1. 构建请求（Request Construction）</h3>\\n<p><strong>技术原理：</strong></p>\\n<ul>\\n<li><strong>URL解析</strong>: 浏览器首先解析用户输入的URL，提取协议（http/https）、域名、端口、路径等组件</li>\\n<li><strong>HTTP报文构建</strong>: 根据用户操作构建HTTP请求报文，包括：\\n<ul>\\n<li>请求行：<code>GET /path HTTP/1.1</code></li>\\n<li>请求头：User-Agent、Accept、Cookie等</li>\\n<li>请求体：POST数据（如果有）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{o as comp,d as data};
